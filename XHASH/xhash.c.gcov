        -:    0:Source:xhash.c
        -:    0:Graph:xhash.gcno
        -:    0:Data:xhash.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/**
        -:    2: * @file  xhash.c
        -:    3: * @author  wzj
        -:    4: * @brief it's an hash copy from wxc
        -:    5: * @version 1.1
        -:    6: * @note  take care of the detail. ask more why.
        -:    7: * @date  2012年07月31日星期二22:09:10
        -:    8: * 
        -:    9: * the basement is the hardest
        -:   10: */ 
        -:   11:#include <stdio.h>
        -:   12:#include <stdlib.h>
        -:   13:#include <string.h>
        -:   14:
        -:   15:#include "../Jlog.h"
        -:   16:#include "xhash.h"
        -:   17:
        -:   18:#define SAFE_FREE(p) if(p){		\
        -:   19:			free(p), p = NULL;	\
        -:   20:		}
        -:   21:
        -:   22:struct _pair_list{
        -:   23:	int slots;
        -:   24:	int max_nodes;
        -:   25:}my_table[5] = {
        -:   26:	{(1 << 3), 8},
        -:   27:	{(1 << 4), 24},
        -:   28:	{(1 << 5), 180},
        -:   29:	{(1 << 6), 361},
        -:   30:	{(1 << 7), 1024}
        -:   31:	};
        -:   32:
       32:   33:unsigned int hash_func_time33(void* key, unsigned int klen)
        -:   34:{
       32:   35:	unsigned int h = 5813;
       32:   36:	unsigned int i = 0;
       32:   37:	char *p = (char*) key;
        -:   38:
      288:   39:	while( i++ < klen)
        -:   40:	{
      224:   41:		h = h + p[i]*33;
        -:   42:	}
        -:   43:
       32:   44:	return h;
        -:   45:}
        -:   46:
        1:   47:int hash_rehash(hash_table_st *ptable)
        -:   48:{
        1:   49:	int i = 0;
        1:   50:	unsigned int new_slots = 0;
        1:   51:	unsigned int new_size = 0;	
        1:   52:	hash_node_st **new_slot = NULL;
        1:   53:	hash_node_st *p = NULL;
        -:   54:
        6:   55:	for(i = 0; i < sizeof(my_table)/sizeof(my_table[0]); i++)
        -:   56:	{
        5:   57:		if(my_table[i].slots == ptable->slots)
        -:   58:		{
        1:   59:			new_slots = my_table[i+1].slots;
        1:   60:			new_size = my_table[i+1].max_nodes;
        -:   61:		}
        -:   62:	}
        -:   63:	/* new_slots != 0 new_size != 0 */	
        1:   64:	new_slot = (hash_node_st**)malloc(sizeof(hash_node_st*) * new_slots);
        1:   65:	if(new_slot == NULL)	
    #####:   66:		return -1;
        -:   67:
        9:   68:	for(i = 0; i < ptable->slots; i++)	
        -:   69:	{
        8:   70:		p = ptable->slot[i];
       24:   71:		while(p)
        -:   72:		{
        8:   73:			hash_node_st *next = p->next;
        8:   74:			int hval = ptable->hash_func(p->key, p->klen);
        8:   75:			int index = hval & (new_slots - 1);
        -:   76:
        8:   77:			p->next = new_slot[index];
        8:   78:			new_slot[index] = p;
        8:   79:			p = next;
        -:   80:		}
        -:   81:	}
        -:   82:
        1:   83:	ptable->slots = new_slots;	
        1:   84:	ptable->size = new_size;
        1:   85:	SAFE_FREE(ptable->slot);
        -:   86:	
        1:   87:	ptable->slot = new_slot;
        -:   88:	
        1:   89:	return 0;
        -:   90:}
        -:   91:
    #####:   92:int hash_init_normal(hash_table_st *ptable, hash_func_t hash_func, destroy_func_t destroy)
        -:   93:{
    #####:   94:	if(ptable == NULL)
    #####:   95:		return -1;
        -:   96:
    #####:   97:	ptable->slots = my_table[0].slots;
    #####:   98:	ptable->size = my_table[0].max_nodes;
        -:   99:
    #####:  100:	ptable->slot = (hash_node_st **)calloc(ptable->slots, sizeof(hash_node_st));
    #####:  101:	if(ptable->slot  == NULL)
    #####:  102:		return -1;
        -:  103:
    #####:  104:	ptable->hash_func = hash_func?hash_func:hash_func_time33;
    #####:  105:	ptable->destroy = destroy?destroy:NULL;
        -:  106:
    #####:  107:	return 0;
        -:  108:}
        -:  109:
        1:  110:hash_table_st *hash_init(hash_func_t hash_func, destroy_func_t destroy)
        -:  111:{
        1:  112:	hash_table_st *ptable = NULL; 
        -:  113:	
        1:  114:	ptable = (hash_table_st*)malloc(sizeof(hash_table_st));	
        1:  115:	if(ptable == NULL)
    #####:  116:		return NULL;
        1:  117:	ptable->slots = my_table[0].slots;
        1:  118:	ptable->size = my_table[0].max_nodes;
        -:  119:
        1:  120:	ptable->slot = (hash_node_st **)calloc(ptable->slots, sizeof(hash_node_st));
        1:  121:	if(ptable->slot  == NULL)
        -:  122:	{
    #####:  123:		SAFE_FREE(ptable);
    #####:  124:		return NULL;
        -:  125:	}
        1:  126:	ptable->hash_func = hash_func?hash_func:hash_func_time33;
        1:  127:	ptable->destroy = destroy?destroy:NULL;
        -:  128:
        1:  129:	return ptable;
        -:  130:}
        -:  131:
       12:  132:int hash_insert(hash_table_st *ptable, void *key, unsigned int klen, void*data)
        -:  133:{
       12:  134:	unsigned int hval = ptable->hash_func(key, klen);
       12:  135:	int slot_index = hval & (ptable->slots - 1);
       12:  136:	hash_node_st *p = ptable->slot[slot_index];
        -:  137:
       27:  138:	while(p)
        -:  139:	{
        9:  140:		if((p->hash_val == hval) && 
        2:  141:		   (p->klen == klen) &&
        2:  142:		   !(memcmp(p->key, key, klen)))
        -:  143:		{
        2:  144:			if(ptable->destroy)
    #####:  145:				ptable->destroy(p->data);
        2:  146:			p->data = data;
        2:  147:			return 0;
        -:  148:		}
        3:  149:		p = p->next;
        -:  150:	}
        -:  151:
       10:  152:	hash_node_st* node = NULL;
       10:  153:	node = (hash_node_st*)calloc(1, sizeof(hash_node_st));
       10:  154:	if(node == NULL)
    #####:  155:		return -1;
       10:  156:	node->hash_val = hval;
        -:  157:
       10:  158:	node->key = (void*)calloc(1, sizeof(char) * klen);
       10:  159:	if(node->key == NULL)
    #####:  160:		return -1;
       10:  161:	memcpy(node->key, key, klen);
        -:  162:
       10:  163:	node->klen = klen;
       10:  164:	node->data = data;
       10:  165:	node->next = ptable->slot[slot_index];
       10:  166:	ptable->slot[slot_index] = node;
        -:  167:
       10:  168:	ptable->nodes++; 
        -:  169:	/**< todo rehash */
       10:  170:	if(ptable->nodes >= ptable->size)
        1:  171:		hash_rehash(ptable);
        -:  172:
       10:  173:	return 0;
        -:  174:}
        -:  175:
    #####:  176:void hash_delete(hash_table_st *ptable, void *key, unsigned int klen)
        -:  177:{
    #####:  178:	unsigned int h_val = ptable->hash_func(key, klen);	
    #####:  179:	unsigned int slot_index = h_val & (ptable->slots - 1);
    #####:  180:	hash_node_st *p = ptable->slot[slot_index];
    #####:  181:	hash_node_st *next = p;
        -:  182:
    #####:  183:	while(p)
        -:  184:	{
    #####:  185:		if((p->hash_val == h_val)&&
    #####:  186:			(p->klen == klen) &&
    #####:  187:			!(memcmp(p->key, key, klen)))
        -:  188:		{
    #####:  189:			if(ptable->destroy)
    #####:  190:				ptable->destroy(p->data);
    #####:  191:			SAFE_FREE(p->key);
    #####:  192:			break;
        -:  193:		}
    #####:  194:		next = p;
    #####:  195:		p = p->next;
        -:  196:	}
        -:  197:
    #####:  198:	if(p == next)
        -:  199:	{
    #####:  200:		ptable->slot[slot_index] = p->next;	
        -:  201:	} else {
    #####:  202:		next->next = p->next;
        -:  203:	}
        -:  204:
    #####:  205:	SAFE_FREE(p);
    #####:  206:}
        -:  207:
       12:  208:int hash_search(hash_table_st *ptable, void *key, unsigned int klen, void **data)
        -:  209:{
       12:  210:	unsigned int h_val = ptable->hash_func(key, klen);		
       12:  211:	unsigned int slot_index = h_val & (ptable->slots - 1);
       12:  212:	hash_node_st *p = ptable->slot[slot_index];
        -:  213:
       26:  214:	while(p)
        -:  215:	{
       38:  216:		if((p->hash_val == h_val) &&
       12:  217:			(p->klen == klen) &&
       12:  218:			!(memcmp(p->key, key, klen)))	
        -:  219:		{
       12:  220:			if(data)
       12:  221:				*data = p->data;
       12:  222:			return 0;
        -:  223:		}
        2:  224:		p = p->next;
        -:  225:	}
        -:  226:
    #####:  227:	return -1;
        -:  228:}
        -:  229:
    #####:  230:void hash_destroy(hash_table_st *ptable)
        -:  231:{
    #####:  232:	hash_node_st *p = NULL;
    #####:  233:	unsigned int i = 0;
        -:  234:
    #####:  235:	for(i = 0; i < ptable->slots; ++i)
        -:  236:	{
    #####:  237:		p = ptable->slot[i];
    #####:  238:		while(p)
        -:  239:		{
    #####:  240:			hash_node_st *next = p->next;
    #####:  241:			if(ptable->destroy)	
    #####:  242:				ptable->destroy(p->data);
    #####:  243:			SAFE_FREE(p->key);
    #####:  244:			SAFE_FREE(p);
    #####:  245:			p = next;
        -:  246:		}
        -:  247:	}
        -:  248:	
    #####:  249:	SAFE_FREE(ptable->slot);
    #####:  250:	SAFE_FREE(ptable);
    #####:  251:}
        -:  252:
        2:  253:void hash_walk(hash_table_st *ptable, walk_func_t w_func, void *cont)
        -:  254:{
        2:  255:	hash_node_st *p = NULL;	
        2:  256:	unsigned int i = 0;
        2:  257:	if(ptable == NULL)
        -:  258:	{
    #####:  259:		WRITELOG("delete failed, ptable is null.");
    #####:  260:		return ;
        -:  261:	}
        -:  262:
       34:  263:	for(i = 0 ; i < ptable->slots; ++i)
        -:  264:	{
       32:  265:		p = ptable->slot[i];
       84:  266:		while(p)
        -:  267:		{
       20:  268:			cont = w_func(p, cont);
       20:  269:			p = p->next;
        -:  270:		}
        -:  271:	}
        -:  272:}
        -:  273:
        1:  274:void hash_status(hash_table_st *ptable, int *state, int len)
        -:  275:{
        1:  276:	unsigned int i = 0;
        1:  277:	hash_node_st *p = NULL;
        -:  278:
       17:  279:	for(i = 0; i < ptable->slots; ++i)
        -:  280:	{
       16:  281:		int j = 0;
       16:  282:		p = ptable->slot[i];
       42:  283:		while(p)
        -:  284:		{
       10:  285:			j++;
       10:  286:			p = p->next;
        -:  287:		}
       16:  288:		state[i] = j;
        -:  289:	}
        1:  290:}
        -:  291:
       20:  292:void* print_walk(hash_node_st *node, void* cont)
        -:  293:{
       20:  294:	if(node != NULL)
        -:  295:	{
       20:  296:		WRITELOG("%s", (char*)node->data);
        -:  297:	}
        -:  298:
       20:  299:	return cont;
        -:  300:}
        -:  301:
        -:  302:struct _val_key{
        -:  303:	char *key;
        -:  304:	char *val;	
        -:  305:}val_key[] = {
        -:  306:	{"abc1234", "1ab"},
        -:  307:	{"bcd3223", "2cd"},
        -:  308:	{"af134fd", "3errr"},
        -:  309:	{"adffae2", "4erffa"},
        -:  310:	{"aadffew", "5fcxfa"},
        -:  311:	{"aadffew", "6asdfff"},
        -:  312:	{"aadffew", "7asdfffaa"},
        -:  313:	{"fffffff", "8arrrrrr"},
        -:  314:	{"affcxxx", "9qersdf"},
        -:  315:	{"reqwewq", "10affffz"},
        -:  316:	{"avzzcv", "11avzvzcv"},
        -:  317:	{"fadddd", "12aafadvv"}
        -:  318:		};
        -:  319://#if XHASH_TEST
        -:  320:#if 1
        1:  321:int main()
        -:  322:{
        1:  323:	hash_table_st *table = NULL;
        1:  324:	int i = 0;
        1:  325:	table = hash_init(NULL, NULL);
        -:  326:
       13:  327:	for(i = 0; i < sizeof(val_key)/sizeof(val_key[0]); i++)
        -:  328:	{
       12:  329:		hash_insert(table, val_key[i].key, 7, val_key[i].val);
       12:  330:		WRITELOG("val_key:%s, val_val: %s", val_key[i].key, val_key[i].val);
        -:  331:	}
        -:  332:
        1:  333:	WRITELOG("+++++++++++++++++++++++++++++++++++++++++++++++++");
        -:  334:	
       13:  335:	for(i = 0; i < sizeof(val_key)/sizeof(val_key[0]); i++)
        -:  336:	{
       12:  337:		char *data = NULL;
       12:  338:		hash_search(table, val_key[i].key, 7, (void**)&data);
       12:  339:		WRITELOG("val_key:%s, val_val: %s", val_key[i].key, data);
        -:  340:	}
        -:  341:
        1:  342:	WRITELOG("+++++++++++++++++++++++++++++++++++++++++++++++++");
        1:  343:	char *t = NULL;
        1:  344:	hash_walk(table, print_walk, t);
        -:  345:#if 0
        -:  346:	for(i = 0; i < 5; i++)
        -:  347:	{
        -:  348:		hash_delete(table, val_key[i].key, 7);
        -:  349:	}
        -:  350:#endif
        1:  351:	WRITELOG("+++++++++++++++++++++++++++++++++++++++++++++++++");
        1:  352:	hash_walk(table, print_walk, t);
        -:  353:
        1:  354:	WRITELOG("+++++++++++++++++++++++++++++++++++++++++++++++++");
        1:  355:	int stat[50] = {0};
        1:  356:	hash_status(table, stat, 50);
       51:  357:	for(i = 0; i < 50; i++)
        -:  358:	{
       50:  359:		WRITELOG("cont:%d", stat[i]);
        -:  360:	}
        -:  361:
        1:  362:	return 0;
        -:  363:}
        -:  364:
        -:  365:#endif
